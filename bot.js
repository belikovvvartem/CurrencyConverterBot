// bot.js
const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');
const { TELEGRAM_TOKEN, EXCHANGE_API_KEY, EXCHANGE_API_URL } = require('./config');

const bot = new Telegraf(TELEGRAM_TOKEN);

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –≤–∞–ª—é—Ç –∑ –ø—Ä–∞–ø–æ—Ä–∞–º–∏
const availableCurrencies = {
  'USD': 'üá∫üá∏', 'EUR': 'üá™üá∫', 'HUF': 'üá≠üá∫', 'PLN': 'üáµüá±', 'CZK': 'üá®üáø', 
  'RON': 'üá∑üá¥', 'GBP': 'üá¨üáß', 'UAH': 'üá∫üá¶' // –î–æ–¥–∞–Ω–æ –≥—Ä–∏–≤–Ω—é (UAH)
};

// –ü–æ—á–∞—Ç–∫–æ–≤–µ –≤—ñ—Ç–∞–Ω–Ω—è
bot.start((ctx) => {
    ctx.reply("–ü—Ä–∏–≤—ñ—Ç! –Ø –≤–∞–ª—é—Ç–Ω–∏–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä. –í–≤–µ–¥–∏ —Å—É–º—É —Ç–∞ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó.");
});

// –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç—É –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ —Ç–∞ –≤–∞–ª—é—Ç–∏
bot.on('text', async (ctx) => {
    const message = ctx.message.text.split(' ');

    if (message.length === 2) {
        const amount = parseFloat(message[0]);
        const fromCurrency = message[1].toUpperCase();

        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–æ—ó –≤–∞–ª—é—Ç–∏
        if (!availableCurrencies[fromCurrency]) {
            return ctx.reply(`–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—é –≤–∞–ª—é—Ç—É ${fromCurrency}. –í–≤–µ–¥—ñ—Ç—å –æ–¥–Ω—É –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –≤–∞–ª—é—Ç: ${Object.keys(availableCurrencies).join(', ')}`);
        }

        if (isNaN(amount)) {
            return ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É —Å—É–º—É!");
        }

        // –ó–∞–ø–∏—Ç –∫—É—Ä—Å—É –≤–∞–ª—é—Ç
        try {
            const response = await axios.get(`${EXCHANGE_API_URL}${fromCurrency}`, {
                params: {
                    apiKey: EXCHANGE_API_KEY
                }
            });

            const rates = response.data.rates;
            const availableCurrenciesText = Object.keys(availableCurrencies)
                .filter(currency => rates[currency])
                .map(currency => `${availableCurrencies[currency]} ${currency}`).join('\n'); // –ó—Ä–æ–±–∏–º–æ –∫–æ–∂–Ω—É –≤–∞–ª—é—Ç—É –Ω–∞ –æ–∫—Ä–µ–º–æ–º—É —Ä—è–¥–∫—É –∑ –ø—Ä–∞–ø–æ—Ä–æ–º

            ctx.reply(`–Ø –º–æ–∂—É –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –∑ ${availableCurrencies[fromCurrency]} ${fromCurrency} –≤ –Ω–∞—Å—Ç—É–ø–Ω—ñ –≤–∞–ª—é—Ç–∏: \n${availableCurrenciesText}. \n–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó:`, 
                Markup.inlineKeyboard(
                    Object.keys(availableCurrencies)
                        .filter(currency => rates[currency])
                        .map(currency => Markup.button.callback(`${availableCurrencies[currency]}`, `convert_${currency}`)), // –¢—ñ–ª—å–∫–∏ –ø—Ä–∞–ø–æ—Ä–∏ —è–∫ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                    { columns: 4 } // –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ–≤–ø—Ü—ñ–≤ –¥–ª—è –º–∞–∫–µ—Ç—É
                )
            );

            // –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –≤–∞–ª—é—Ç–∏
            bot.action(/^convert_/, async (ctx) => {
                const toCurrency = ctx.callbackQuery.data.split('_')[1];

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–æ—ó –≤–∞–ª—é—Ç–∏ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
                if (!rates[toCurrency]) {
                    return ctx.reply(`–ù–∞ –∂–∞–ª—å, —è –Ω–µ –º–æ–∂—É –∫–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ –≤–∞–ª—é—Ç—É ${toCurrency}. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.`);
                }

                const convertedAmount = amount * rates[toCurrency];
                ctx.reply(`${amount} ${fromCurrency} = ${convertedAmount.toFixed(2)} ${toCurrency}`);
            });

        } catch (error) {
            console.error(error);
            ctx.reply("–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç.");
        }
    } else {
        ctx.reply("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É —ñ –≤–∞–ª—é—Ç—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 100 USD.");
    }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch();
